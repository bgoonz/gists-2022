{"ref":"a850638b-6af2-4d7f-bfa9-22ccfe696c0f","content":"{\"version\":1,\"machineId\":\"d3faf02c-5296-430b-b43d-125ca0e19aaf\",\"content\":\"{\\\"excel.json\\\":\\\"{\\\\n\\\\t// Place your snippets for excel here. Each snippet is defined under a snippet name and has a prefix, body and \\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\\\n\\\\t// same ids are connected.\\\\n\\\\t// Example:\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\n\\\\t// \\\\t],\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\n\\\\t// }\\\\n}\\\",\\\"javascript.json\\\":\\\"\\\\n\\\\n\\\\n\\\\t\\\\t  {\\\\n\\\\t\\\\t\\\\t  \\\\\\\"snippetName\\\\\\\": {\\\\n\\\\t\\\\t\\\\t\\\\t\\\\n\\\\t\\\\t\\\\t\\\\n\\\\t \\\\t\\\\\\\"prefix\\\\\\\": [\\\\\\\"dln\\\\\\\"],\\\\n\\\\t\\\\t \\\\\\\"body\\\\\\\": \\\\\\\"\\\\n\\\\t\\\\t\\\\t \\\\n\\\\t\\\\tclass DoubleLinkNode {\\\\n\\\\t\\\\t\\\\tconstructor(value) {\\\\n\\\\t\\\\t\\\\t  this.value = value;\\\\n\\\\t\\\\t\\\\t  this.next = null;\\\\n\\\\t\\\\t\\\\t  this.previous = null;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  }\\\\n\\\\t\\\\t\\\\n\\\\t\\\\t  class DoubleLinkedList {\\\\n\\\\t\\\\t\\\\tconstructor() {\\\\n\\\\t\\\\t\\\\t  this.head = null;\\\\n\\\\t\\\\t\\\\t  this.tail = null;\\\\n\\\\t\\\\t\\\\t  this.length = 0;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\tgetSize() {\\\\n\\\\t\\\\t\\\\t  return this.length;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\taddToHead(value) {\\\\n\\\\t\\\\t\\\\t  var newNode = new DoubleLinkNode(value);\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (this.length > 0) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head.previous = newNode;\\\\n\\\\t\\\\t\\\\t\\\\tnewNode.next = this.head;\\\\n\\\\t\\\\t\\\\t\\\\tthis.head = newNode;\\\\n\\\\t\\\\t\\\\t  } else {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head = newNode;\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail = newNode;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  this.length += 1;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\tpeekAtHead() {\\\\n\\\\t\\\\t\\\\t  if (this.head === null) {\\\\n\\\\t\\\\t\\\\t\\\\treturn undefined;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t\\\\t  return this.head.value;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\tremoveFromHead() {\\\\n\\\\t\\\\t\\\\t  const currentNode = this.head;\\\\n\\\\t\\\\t\\\\t  if (currentNode === null) {\\\\n\\\\t\\\\t\\\\t\\\\treturn undefined;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (currentNode !== null) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head = currentNode.next;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (this.head !== null) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head.previous = null;\\\\n\\\\t\\\\t\\\\t  } else {\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail = null;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  this.length -= 1;\\\\n\\\\t\\\\t\\\\t  return currentNode.value;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\taddToTail(value) {\\\\n\\\\t\\\\t\\\\t  var newNode = new DoubleLinkNode(value);\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (this.length > 0) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail.next = newNode;\\\\n\\\\t\\\\t\\\\t\\\\tnewNode.previous = this.tail;\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail = newNode;\\\\n\\\\t\\\\t\\\\t  } else {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head = newNode;\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail = newNode;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  this.length += 1;\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  return newNode;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\tpeekAtTail() {\\\\n\\\\t\\\\t\\\\t  if (this.tail === null) {\\\\n\\\\t\\\\t\\\\t\\\\treturn undefined;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t\\\\t  return this.tail.value;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\tremoveFromTail() {\\\\n\\\\t\\\\t\\\\t  const currentNode = this.tail;\\\\n\\\\t\\\\t\\\\t  if (currentNode === null) {\\\\n\\\\t\\\\t\\\\t\\\\treturn undefined;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (currentNode !== null) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail = currentNode.previous;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  if (this.tail !== null) {\\\\n\\\\t\\\\t\\\\t\\\\tthis.tail.next = null;\\\\n\\\\t\\\\t\\\\t  } else {\\\\n\\\\t\\\\t\\\\t\\\\tthis.head = null;\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t  this.length -= 1;\\\\n\\\\t\\\\t\\\\t  return currentNode.value;\\\\n\\\\t\\\\t\\\\t}\\\\n\\\\t\\\\t  },\\\\n\\\\t\\\\t  \\\\n\\\\t\\\\t\\\\t\\\\t  \\\\\\\"description\\\\\\\": \\\\\\\"description\\\\\\\"\\\\n\\\\t\\\\t\\\\t  }\\\\n\\\\t\\\\t  }\\\\n\\\\t \\\\t\\\\n\\\\t\\\\\\\"description\\\\\\\": \\\\t\\\\\\\"a doubly-linked list, a linked list where each node* points to its predecessor and follower. The tail node's follower (stored in* the next instance variable) should be null. The head node's predecessor * (stored in the previous variable) should be null, too.\\\\\\\"\\\\n \\\\n\\\\n\\\",\\\"double-linked-node.json\\\":\\\"{\\\\n  \\\\\\\"dln\\\\\\\": {\\\\n    \\\\\\\"prefix\\\\\\\": \\\\\\\"dln\\\\\\\",\\\\n    \\\\\\\"body\\\\\\\": [\\\\n      \\\\\\\"class DoubleLinkNode {\\\\\\\",\\\\n      \\\\\\\"    constructor(value) {\\\\\\\",\\\\n      \\\\\\\"      this.value = value;\\\\\\\",\\\\n      \\\\\\\"      this.next = null;\\\\\\\",\\\\n      \\\\\\\"      this.previous = null;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"  class DoubleLinkedList {\\\\\\\",\\\\n      \\\\\\\"    constructor() {\\\\\\\",\\\\n      \\\\\\\"      this.head = null;\\\\\\\",\\\\n      \\\\\\\"      this.tail = null;\\\\\\\",\\\\n      \\\\\\\"      this.length = 0;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    getSize() {\\\\\\\",\\\\n      \\\\\\\"      return this.length;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    addToHead(value) {\\\\\\\",\\\\n      \\\\\\\"      var newNode = new DoubleLinkNode(value);\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (this.length > 0) {\\\\\\\",\\\\n      \\\\\\\"        this.head.previous = newNode;\\\\\\\",\\\\n      \\\\\\\"        newNode.next = this.head;\\\\\\\",\\\\n      \\\\\\\"        this.head = newNode;\\\\\\\",\\\\n      \\\\\\\"      } else {\\\\\\\",\\\\n      \\\\\\\"        this.head = newNode;\\\\\\\",\\\\n      \\\\\\\"        this.tail = newNode;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      this.length += 1;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    peekAtHead() {\\\\\\\",\\\\n      \\\\\\\"      if (this.head === null) {\\\\\\\",\\\\n      \\\\\\\"        return undefined;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"      return this.head.value;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    removeFromHead() {\\\\\\\",\\\\n      \\\\\\\"      const currentNode = this.head;\\\\\\\",\\\\n      \\\\\\\"      if (currentNode === null) {\\\\\\\",\\\\n      \\\\\\\"        return undefined;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (currentNode !== null) {\\\\\\\",\\\\n      \\\\\\\"        this.head = currentNode.next;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (this.head !== null) {\\\\\\\",\\\\n      \\\\\\\"        this.head.previous = null;\\\\\\\",\\\\n      \\\\\\\"      } else {\\\\\\\",\\\\n      \\\\\\\"        this.tail = null;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      this.length -= 1;\\\\\\\",\\\\n      \\\\\\\"      return currentNode.value;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    addToTail(value) {\\\\\\\",\\\\n      \\\\\\\"      var newNode = new DoubleLinkNode(value);\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (this.length > 0) {\\\\\\\",\\\\n      \\\\\\\"        this.tail.next = newNode;\\\\\\\",\\\\n      \\\\\\\"        newNode.previous = this.tail;\\\\\\\",\\\\n      \\\\\\\"        this.tail = newNode;\\\\\\\",\\\\n      \\\\\\\"      } else {\\\\\\\",\\\\n      \\\\\\\"        this.head = newNode;\\\\\\\",\\\\n      \\\\\\\"        this.tail = newNode;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      this.length += 1;\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      return newNode;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    peekAtTail() {\\\\\\\",\\\\n      \\\\\\\"      if (this.tail === null) {\\\\\\\",\\\\n      \\\\\\\"        return undefined;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"      return this.tail.value;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"    removeFromTail() {\\\\\\\",\\\\n      \\\\\\\"      const currentNode = this.tail;\\\\\\\",\\\\n      \\\\\\\"      if (currentNode === null) {\\\\\\\",\\\\n      \\\\\\\"        return undefined;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (currentNode !== null) {\\\\\\\",\\\\n      \\\\\\\"        this.tail = currentNode.previous;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      if (this.tail !== null) {\\\\\\\",\\\\n      \\\\\\\"        this.tail.next = null;\\\\\\\",\\\\n      \\\\\\\"      } else {\\\\\\\",\\\\n      \\\\\\\"        this.head = null;\\\\\\\",\\\\n      \\\\\\\"      }\\\\\\\",\\\\n      \\\\\\\"  \\\\\\\",\\\\n      \\\\\\\"      this.length -= 1;\\\\\\\",\\\\n      \\\\\\\"      return currentNode.value;\\\\\\\",\\\\n      \\\\\\\"    }\\\\\\\",\\\\n      \\\\\\\"  }\\\\\\\",\\\\n      \\\\\\\"\\\\\\\"\\\\n    ]\\\\n  }\\\\n}\\\\n\\\",\\\"javascriptreact.json\\\":\\\"{\\\\n\\\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and \\\\n\\\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\\\n\\\\t// same ids are connected.\\\\n\\\\t// Example:\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\n\\\\t// \\\\t],\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\n\\\\t// }\\\\n}\\\",\\\"html-boil.code-snippets\\\":\\\"{\\\\n\\\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\\\n\\\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\\\n\\\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\\\n\\\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\\\n\\\\t// Placeholders with the same ids are connected.\\\\n\\\\t// Example:\\\\n\\\\t// \\\\\\\"Boilerplate\\\\\\\": {\\\\n\\\\t// \\\\t\\\\\\\"scope\\\\\\\": \\\\\\\"html\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"html\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t<!DOCTYPE html>\\\\n<html lang=\\\\\\\"en\\\\\\\">\\\\n    <head>\\\\n        <meta charset=\\\\\\\"UTF-8\\\\\\\" />\\\\n        <meta name=\\\\\\\"viewport\\\\\\\" content=\\\\\\\"width=device-width, initial-scale=1.0\\\\\\\" />\\\\n\\\\n        <link rel=\\\\\\\"stylesheet\\\\\\\" href=\\\\\\\"Index.css\\\\\\\" />\\\\n        <title>Title</title>\\\\n    </head>\\\\n    <body>\\\\n\\\\n        <header>\\\\n            <h1>>Header</h1>\\\\n        </header>\\\\n\\\\n        <script src=\\\\\\\"Index.js\\\\\\\"></script>\\\\n    </body>\\\\n</html>\\\\n\\\\n\\\\t// \\\\t],\\\\n\\\\t// \\\\t\\\\\\\"boilerplate-html\\\\\\\"\\\\n\\\\t// }\\\\n}\\\\n\\\",\\\"html.json\\\":\\\"{}\\\",\\\"html-boilerplate.code-snippets\\\":\\\"{\\\\n\\\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\\\n\\\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\\\n\\\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\\\n\\\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\\\n\\\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\\\n\\\\t// Placeholders with the same ids are connected.\\\\n\\\\t// Example:\\\\n\\\\t// \\\\\\\"Print to console\\\\\\\": {\\\\n\\\\t// \\\\t\\\\\\\"scope\\\\\\\": \\\\\\\"javascript,typescript\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"prefix\\\\\\\": \\\\\\\"log\\\\\\\",\\\\n\\\\t// \\\\t\\\\\\\"body\\\\\\\": [\\\\n\\\\t// \\\\t\\\\t\\\\\\\"console.log('$1');\\\\\\\",\\\\n\\\\t// \\\\t\\\\t\\\\\\\"$2\\\\\\\"\\\\n\\\\t// \\\\t],\\\\n\\\\t// \\\\t\\\\\\\"description\\\\\\\": \\\\\\\"Log output to console\\\\\\\"\\\\n\\\\t// }\\\\n}\\\"}\"}"}