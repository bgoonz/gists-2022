Python Developer’s Guide
This guide is a comprehensive resource for contributing to Python – for both new and experienced contributors. It is maintained by the same community that maintains Python. We welcome your contributions to Python!

Quick Reference
Here are the basic steps needed to get set up and contribute a patch. This is meant as a checklist, once you know the basics. For complete instructions please see the setup guide.

Install and set up Git and other dependencies (see the Git Setup page for detailed information).

Fork the CPython repository to your GitHub account and get the source code using:

git clone https://github.com/<your_username>/cpython
cd cpython
Build Python, on UNIX and Mac OS use:

./configure --with-pydebug && make -j
and on Windows use:

PCbuild\build.bat -e -d
See also more detailed instructions, how to install and build dependencies, and the platform-specific pages for UNIX, Mac OS, and Windows.

Run the tests:

./python -m test -j3
On most Mac OS X systems, replace ./python with ./python.exe. On Windows, use python.bat.

Create a new branch where your work for the issue will go, e.g.:

git checkout -b fix-issue-12345 main
If an issue does not already exist, please create it. Trivial issues (e.g. typo fixes) do not require any issue to be created.

Once you fixed the issue, run the tests, run make patchcheck, and if everything is ok, commit.

Push the branch on your fork on GitHub and create a pull request. Include the issue number using bpo-NNNN in the pull request description. For example:

bpo-12345: Fix some bug in spam module
Add a News entry into the Misc/NEWS.d directory as individual file. The news entry can be created by using blurb-it, or the blurb tool and its blurb add command. Please read more about blurb in documentation.

Note

First time contributors will need to sign the Contributor Licensing Agreement (CLA) as described in the Licensing section of this guide.

Quick Links
Here are some links that you probably will reference frequently while contributing to Python:

Issue tracker

Buildbot status

Where to Get Help

PEPs (Python Enhancement Proposals)

Git Bootcamp and Cheat Sheet

Status of Python branches
Branch

Schedule

Status

First release

End-of-life

Release manager

main

TBD

features

TBD

TBD

Pablo Galindo Salgado

3.10

PEP 619

prerelease

2021-10-04

TBD

Pablo Galindo Salgado

3.9

PEP 596

bugfix

2020-10-05

TBD

Łukasz Langa

3.8

PEP 569

security

2019-10-14

2024-10

Łukasz Langa

3.7

PEP 537

security

2018-06-27

2023-06-27

Ned Deily

3.6

PEP 494

security

2016-12-23

2021-12-23

Ned Deily

The main branch is currently the future Python 3.11, and is the only branch that accepts new features. The latest release for each Python version can be found on the download page.

Status:

features
new features, bugfixes, and security fixes are accepted.

prerelease
feature fixes, bugfixes, and security fixes are accepted for the upcoming feature release.

bugfix
bugfixes and security fixes are accepted, new binaries are still released. (Also called maintenance mode or stable release)

security
only security fixes are accepted and no more binaries are released, but new source-only versions can be released

end-of-life
release cycle is frozen; no further changes can be pushed to it.

Dates in italic are scheduled and can be adjusted.

By default, the end-of-life is scheduled 5 years after the first release, but can be adjusted by the release manager of each branch. All Python 2 versions have reached end-of-life.

See also the Development Cycle page for more information about branches.

Contributing
We encourage everyone to contribute to Python and that’s why we have put up this developer’s guide. If you still have questions after reviewing the material in this guide, then the Core Python Mentorship group is available to help guide new contributors through the process.

A number of individuals from the Python community have contributed to a series of excellent guides at Open Source Guides.

Core developers and contributors alike will find the following guides useful:

How to Contribute to Open Source

Building Welcoming Communities

Guide for contributing to Python:

New Contributors

Documentarians

Triagers

Core Developers

Getting Started

Helping with Documentation

Issue Tracking

How to Become a Core Developer

Where to Get Help

Documenting Python

Triaging an Issue

Developer Log

Lifecycle of a Pull Request

Style guide

Helping Triage Issues

Accepting Pull Requests

Running & Writing Tests

reStructuredText Primer

Experts Index

Development Cycle

Fixing “easy” Issues (and Beyond)

Translating

Core Developer Motivations and Affiliations

Following Python’s Development

Core Developers Office Hours

Git Bootcamp and Cheat Sheet

Advanced tasks and topics for once you are comfortable:

Silence Warnings From the Test Suite

Fixing issues found by the buildbots

Coverity Scan

Helping out with reviewing open pull requests. See how to review a Pull Request.

Fixing “easy” Issues (and Beyond)

It is recommended that the above documents be read as needed. New contributors will build understanding of the CPython workflow by reading the sections mentioned in this table. You can stop where you feel comfortable and begin contributing immediately without reading and understanding these documents all at once. If you do choose to skip around within the documentation, be aware that it is written assuming preceding documentation has been read so you may find it necessary to backtrack to fill in missing concepts and terminology.

Proposing changes to Python itself
Improving Python’s code, documentation and tests are ongoing tasks that are never going to be “finished”, as Python operates as part of an ever-evolving system of technology. An even more challenging ongoing task than these necessary maintenance activities is finding ways to make Python, in the form of the standard library and the language definition, an even better tool in a developer’s toolkit.

While these kinds of change are much rarer than those described above, they do happen and that process is also described as part of this guide:

Adding to the Stdlib

Changing the Python Language

Other Interpreter Implementations
This guide is specifically for contributing to the Python reference interpreter, also known as CPython (while most of the standard library is written in Python, the interpreter core is written in C and integrates most easily with the C and C++ ecosystems).

There are other Python implementations, each with a different focus. Like CPython, they always have more things they would like to do than they have developers to work on them. Some major examples that may be of interest are:

PyPy: A Python interpreter focused on high speed (JIT-compiled) operation on major platforms

Jython: A Python interpreter focused on good integration with the Java Virtual Machine (JVM) environment

IronPython: A Python interpreter focused on good integration with the Common Language Runtime (CLR) provided by .NET and Mono

Stackless: A Python interpreter focused on providing lightweight microthreads while remaining largely compatible with CPython specific extension modules

Key Resources
Coding style guides
PEP 7 (Style Guide for C Code)

PEP 8 (Style Guide for Python Code)

Issue tracker
Meta tracker (issue tracker for the issue tracker)

Experts Index

Buildbot status

Source code
Browse online

Snapshot of the *main* branch

Daily OS X installer

PEPs (Python Enhancement Proposals)

Where to Get Help

Developer Log

Additional Resources
Anyone can clone the sources for this guide. See Helping with the Developer’s Guide.

Help with …
Exploring CPython’s Internals

Changing CPython’s Grammar

Guide of CPython’s Parser

Design of CPython’s Compiler

Design of CPython’s Garbage Collector

Tool support
gdb Support

Dynamic Analysis with Clang

Various tools with configuration files as found in the Misc directory

Information about editors and their configurations can be found in the wiki

python.org maintenance

Search this guide

Code of Conduct
Please note that all interactions on Python Software Foundation-supported infrastructure is covered by the PSF Code of Conduct, which includes all infrastructure used in the development of Python itself (e.g. mailing lists, issue trackers, GitHub, etc.). In general this means everyone is expected to be open, considerate, and respectful of others no matter what their position is within the project.

Full Table of Contents
Getting Started
Install git
Get the source code
Compile and build
UNIX
Windows
Install dependencies
Linux
macOS and OS X
Regenerate configure
Troubleshoot the build
Avoid recreating auto-generated files
Editors and Tools
Directory structure
Where to Get Help
Discourse
Mailing Lists
Ask #python-dev
Zulip
Core Mentorship
Core Developers Office Hours
File a Bug
Lifecycle of a Pull Request
Introduction
Quick Guide
Step-by-step Guide
Resolving Merge Conflicts
Making Good PRs
patchcheck
Making Good Commits
Licensing
Submitting
Converting an Existing Patch from b.p.o to GitHub
Reviewing
How to Review a Pull Request
Leaving a Pull Request Review on GitHub
Dismissing Review from Another Core Developer
Committing/Rejecting
Crediting
Running & Writing Tests
Running
Unexpected Skips
Writing
Benchmarks
Increase Test Coverage
Common Gotchas
Measuring Coverage
Using coverage.py
Using test.regrtest
Filing the Issue
Measuring coverage of C code with gcov and lcov
Helping with Documentation
Python Documentation
Helping with documentation issues
Proofreading
Helping with the Developer’s Guide
Developer’s Guide workflow
Documenting Python
Introduction
Style guide
Use of whitespace
Footnotes
Capitalization
Affirmative Tone
Economy of Expression
Security Considerations (and Other Concerns)
Code Examples
Code Equivalents
Audience
reStructuredText Primer
Paragraphs
Inline markup
Lists and Quotes
Source Code
Hyperlinks
Sections
Explicit Markup
Directives
Footnotes
Comments
Source encoding
Gotchas
Additional Markup Constructs
Meta-information markup
Module-specific markup
Information units
Showing code examples
Inline markup
Cross-linking markup
Paragraph-level markup
Table-of-contents markup
Index-generating markup
Grammar production displays
Substitutions
Building the documentation
Using make / make.bat
Using sphinx-build
Translating
Starting a new translation
PEP 545 summary:
How to get help
Translation FAQ
Silence Warnings From the Test Suite
Fixing “easy” Issues (and Beyond)
Issue Tracking
Using the Issue Tracker
Checking if a bug already exists
Reporting an issue
Understanding the issue’s progress and status
Disagreement With a Resolution on the Issue Tracker
Helping Triage Issues
Classifying Reports
Reviewing Patches
Finding an Issue You Can Help With
Gaining the “Developer” Role on the Issue Tracker
The Meta Tracker
Triaging an Issue
Python triage team
Becoming a member of the Python triage team
GitHub Labels for PRs
Fields in the Issue Tracker
Title
Type
Stage
Components
Versions
Priority
Keywords
Nosy List
Assigned To
Dependencies
Superseder
Status
Resolution
Mercurial Repository
Generating Special Links in a Comment
Checklist for Triaging
Following Python’s Development
Mailing Lists
Discourse
IRC
Blogs
Standards of behaviour in these communication channels
Setting Expectations for Open Source Participation
Additional Repositories
Porting Python to a new platform
How to Become a Core Developer
What it Takes
What it Means
Gaining Commit Privileges
Mailing Lists
Sign a Contributor Agreement
Pull Request merging
Responsibilities
Developer Log
Procedure for Granting or Dropping Access
Accepting Pull Requests
Assessing a pull request
Updating NEWS and What’s New in Python
Working with Git
Seeing active branches
Backporting changes to an older version
Reverting a merged pull request
Development Cycle
Branches
In-development (main) branch
Maintenance branches
Security branches
End-of-life branches
Stages
Pre-alpha
Alpha
Beta
Release Candidate (RC)
Final
Repository Administration
Organization Repository Policy
Organization Owner Policy
Current Owners
Repository Administrator Role Policy
Current Administrators
Repository Release Manager Role Policy
Continuous Integration
In case of trouble
Buildbot failures on Pull Requests
Checking results of automatic builds
Stability
Flags-dependent failures
Ordering-dependent failures
Transient failures
Custom builders
Adding to the Stdlib
Adding to a pre-existing module
Adding a new module
Acceptable Types of Modules
Requirements
Proposal Process
Changing the Python Language
What Qualifies
PEP Process
Suggesting new features and language changes
Experts Index
Stdlib
Tools
Platforms
Miscellaneous
Documentation Translations
gdb Support
gdb 7 and later
gdb 6 and earlier
Updating auto-load-safe-path to allow test_gdb to run
Exploring CPython’s Internals
CPython Source Code Layout
Additional References
Changing CPython’s Grammar
Abstract
Checklist
Guide of CPython’s Parser
Abstract
How PEG Parsers Work
Key ideas
Consequences or the ordered choice operator
Syntax
Grammar Expressions
Left recursion
Variables in the Grammar
Grammar actions
Pegen
How to regenerate the parser
How to regenerate the meta-parser
Grammatical elements and rules
Tokenization
Memoization
Automatic variables
Hard and Soft keywords
Error handling
How Syntax errors are reported
Generating AST objects
Testing
Debugging generated parsers
Making experiments
Verbose mode
References
Design of CPython’s Compiler
Abstract
Parsing
Abstract Syntax Trees (AST)
Memory Management
Source Code to AST
Control Flow Graphs
AST to CFG to Bytecode
Introducing New Bytecode
Code Objects
Important Files
Known Compiler-related Experiments
References
Design of CPython’s Garbage Collector
Abstract
Memory layout and object structure
Identifying reference cycles
Why moving unreachable objects is better
Destroying unreachable objects
Optimization: generations
Collecting the oldest generation
Optimization: reusing fields to save memory
Optimization: delay tracking containers
Updating standard library extension modules
Changing Python’s C API
The internal API
With PyAPI_FUNC or PyAPI_DATA
With the extern keyword
Private names
Public C API
Limited API
Guidelines for changing the Limited API
Adding a new definition to the Limited API
Coverity Scan
Access to analysis reports
Building and uploading analysis
Known limitations
False positives
Intentionally
Modeling
Workflow
False positive and intentional issues
Positive issues
Contact
Dynamic Analysis with Clang
What is Clang?
What are Sanitizers?
Clang/LLVM Setup
Download, Build and Install
Python Build Setup
Building Python
Blacklisting (Ignoring) Findings
Running a buildbot worker
Preparing for buildbot worker setup
Setting up the buildbot worker
Conventional always-on machines
Latent workers
Buildbot worker operation
Required Ports
Required Resources
Security Considerations
Core Developer Motivations and Affiliations
Published entries
Goals of this page
Limitations on scope
Git Bootcamp and Cheat Sheet
Forking CPython GitHub Repository
Cloning a Forked CPython Repository
Listing the Remote Repositories
Setting Up Your Name and Email Address
Enabling autocrlf on Windows
Creating and Switching Branches
Deleting Branches
Renaming Branch
Staging and Committing Files
Reverting Changes
Stashing Changes
Committing Changes
Pushing Changes
Creating a Pull Request
Updating your CPython Fork
Applying a Patch from Mercurial to Git
Downloading Other’s Patches
Accepting and Merging a Pull Request
Backporting Merged Changes
Editing a Pull Request Prior to Merging
Appendix: Topics
Basics for contributors
Core developers
Development workflow for contributors
Documenting Python and style guide
Issue tracking and triaging
Language development in depth
Testing and continuous integration