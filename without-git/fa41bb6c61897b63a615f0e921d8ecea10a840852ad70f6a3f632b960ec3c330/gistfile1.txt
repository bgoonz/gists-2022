Python Developer’s GuideThis guide is a comprehensive resource for contributing to Python – for both new and experienced contributors. It is maintained by the same community that maintains Python. We welcome your contributions to Python!Quick ReferenceHere are the basic steps needed to get set up and contribute a patch. This is meant as a checklist, once you know the basics. For complete instructions please see the setup guide.Install and set up Git and other dependencies (see the Git Setup page for detailed information).Fork the CPython repository to your GitHub account and get the source code using:git clone https://github.com/<your_username>/cpythoncd cpythonBuild Python, on UNIX and Mac OS use:./configure --with-pydebug && make -jand on Windows use:PCbuild\build.bat -e -dSee also more detailed instructions, how to install and build dependencies, and the platform-specific pages for UNIX, Mac OS, and Windows.Run the tests:./python -m test -j3On most Mac OS X systems, replace ./python with ./python.exe. On Windows, use python.bat.Create a new branch where your work for the issue will go, e.g.:git checkout -b fix-issue-12345 mainIf an issue does not already exist, please create it. Trivial issues (e.g. typo fixes) do not require any issue to be created.Once you fixed the issue, run the tests, run make patchcheck, and if everything is ok, commit.Push the branch on your fork on GitHub and create a pull request. Include the issue number using bpo-NNNN in the pull request description. For example:bpo-12345: Fix some bug in spam moduleAdd a News entry into the Misc/NEWS.d directory as individual file. The news entry can be created by using blurb-it, or the blurb tool and its blurb add command. Please read more about blurb in documentation.NoteFirst time contributors will need to sign the Contributor Licensing Agreement (CLA) as described in the Licensing section of this guide.Quick LinksHere are some links that you probably will reference frequently while contributing to Python:Issue trackerBuildbot statusWhere to Get HelpPEPs (Python Enhancement Proposals)Git Bootcamp and Cheat SheetStatus of Python branchesBranchScheduleStatusFirst releaseEnd-of-lifeRelease managermainTBDfeaturesTBDTBDPablo Galindo Salgado3.10PEP 619prerelease2021-10-04TBDPablo Galindo Salgado3.9PEP 596bugfix2020-10-05TBDŁukasz Langa3.8PEP 569security2019-10-142024-10Łukasz Langa3.7PEP 537security2018-06-272023-06-27Ned Deily3.6PEP 494security2016-12-232021-12-23Ned DeilyThe main branch is currently the future Python 3.11, and is the only branch that accepts new features. The latest release for each Python version can be found on the download page.Status:featuresnew features, bugfixes, and security fixes are accepted.prereleasefeature fixes, bugfixes, and security fixes are accepted for the upcoming feature release.bugfixbugfixes and security fixes are accepted, new binaries are still released. (Also called maintenance mode or stable release)securityonly security fixes are accepted and no more binaries are released, but new source-only versions can be releasedend-of-liferelease cycle is frozen; no further changes can be pushed to it.Dates in italic are scheduled and can be adjusted.By default, the end-of-life is scheduled 5 years after the first release, but can be adjusted by the release manager of each branch. All Python 2 versions have reached end-of-life.See also the Development Cycle page for more information about branches.ContributingWe encourage everyone to contribute to Python and that’s why we have put up this developer’s guide. If you still have questions after reviewing the material in this guide, then the Core Python Mentorship group is available to help guide new contributors through the process.A number of individuals from the Python community have contributed to a series of excellent guides at Open Source Guides.Core developers and contributors alike will find the following guides useful:How to Contribute to Open SourceBuilding Welcoming CommunitiesGuide for contributing to Python:New ContributorsDocumentariansTriagersCore DevelopersGetting StartedHelping with DocumentationIssue TrackingHow to Become a Core DeveloperWhere to Get HelpDocumenting PythonTriaging an IssueDeveloper LogLifecycle of a Pull RequestStyle guideHelping Triage IssuesAccepting Pull RequestsRunning & Writing TestsreStructuredText PrimerExperts IndexDevelopment CycleFixing “easy” Issues (and Beyond)TranslatingCore Developer Motivations and AffiliationsFollowing Python’s DevelopmentCore Developers Office HoursGit Bootcamp and Cheat SheetAdvanced tasks and topics for once you are comfortable:Silence Warnings From the Test SuiteFixing issues found by the buildbotsCoverity ScanHelping out with reviewing open pull requests. See how to review a Pull Request.Fixing “easy” Issues (and Beyond)It is recommended that the above documents be read as needed. New contributors will build understanding of the CPython workflow by reading the sections mentioned in this table. You can stop where you feel comfortable and begin contributing immediately without reading and understanding these documents all at once. If you do choose to skip around within the documentation, be aware that it is written assuming preceding documentation has been read so you may find it necessary to backtrack to fill in missing concepts and terminology.Proposing changes to Python itselfImproving Python’s code, documentation and tests are ongoing tasks that are never going to be “finished”, as Python operates as part of an ever-evolving system of technology. An even more challenging ongoing task than these necessary maintenance activities is finding ways to make Python, in the form of the standard library and the language definition, an even better tool in a developer’s toolkit.While these kinds of change are much rarer than those described above, they do happen and that process is also described as part of this guide:Adding to the StdlibChanging the Python LanguageOther Interpreter ImplementationsThis guide is specifically for contributing to the Python reference interpreter, also known as CPython (while most of the standard library is written in Python, the interpreter core is written in C and integrates most easily with the C and C++ ecosystems).There are other Python implementations, each with a different focus. Like CPython, they always have more things they would like to do than they have developers to work on them. Some major examples that may be of interest are:PyPy: A Python interpreter focused on high speed (JIT-compiled) operation on major platformsJython: A Python interpreter focused on good integration with the Java Virtual Machine (JVM) environmentIronPython: A Python interpreter focused on good integration with the Common Language Runtime (CLR) provided by .NET and MonoStackless: A Python interpreter focused on providing lightweight microthreads while remaining largely compatible with CPython specific extension modulesKey ResourcesCoding style guidesPEP 7 (Style Guide for C Code)PEP 8 (Style Guide for Python Code)Issue trackerMeta tracker (issue tracker for the issue tracker)Experts IndexBuildbot statusSource codeBrowse onlineSnapshot of the *main* branchDaily OS X installerPEPs (Python Enhancement Proposals)Where to Get HelpDeveloper LogAdditional ResourcesAnyone can clone the sources for this guide. See Helping with the Developer’s Guide.Help with …Exploring CPython’s InternalsChanging CPython’s GrammarGuide of CPython’s ParserDesign of CPython’s CompilerDesign of CPython’s Garbage CollectorTool supportgdb SupportDynamic Analysis with ClangVarious tools with configuration files as found in the Misc directoryInformation about editors and their configurations can be found in the wikipython.org maintenanceSearch this guideCode of ConductPlease note that all interactions on Python Software Foundation-supported infrastructure is covered by the PSF Code of Conduct, which includes all infrastructure used in the development of Python itself (e.g. mailing lists, issue trackers, GitHub, etc.). In general this means everyone is expected to be open, considerate, and respectful of others no matter what their position is within the project.Full Table of ContentsGetting StartedInstall gitGet the source codeCompile and buildUNIXWindowsInstall dependenciesLinuxmacOS and OS XRegenerate configureTroubleshoot the buildAvoid recreating auto-generated filesEditors and ToolsDirectory structureWhere to Get HelpDiscourseMailing ListsAsk #python-devZulipCore MentorshipCore Developers Office HoursFile a BugLifecycle of a Pull RequestIntroductionQuick GuideStep-by-step GuideResolving Merge ConflictsMaking Good PRspatchcheckMaking Good CommitsLicensingSubmittingConverting an Existing Patch from b.p.o to GitHubReviewingHow to Review a Pull RequestLeaving a Pull Request Review on GitHubDismissing Review from Another Core DeveloperCommitting/RejectingCreditingRunning & Writing TestsRunningUnexpected SkipsWritingBenchmarksIncrease Test CoverageCommon GotchasMeasuring CoverageUsing coverage.pyUsing test.regrtestFiling the IssueMeasuring coverage of C code with gcov and lcovHelping with DocumentationPython DocumentationHelping with documentation issuesProofreadingHelping with the Developer’s GuideDeveloper’s Guide workflowDocumenting PythonIntroductionStyle guideUse of whitespaceFootnotesCapitalizationAffirmative ToneEconomy of ExpressionSecurity Considerations (and Other Concerns)Code ExamplesCode EquivalentsAudiencereStructuredText PrimerParagraphsInline markupLists and QuotesSource CodeHyperlinksSectionsExplicit MarkupDirectivesFootnotesCommentsSource encodingGotchasAdditional Markup ConstructsMeta-information markupModule-specific markupInformation unitsShowing code examplesInline markupCross-linking markupParagraph-level markupTable-of-contents markupIndex-generating markupGrammar production displaysSubstitutionsBuilding the documentationUsing make / make.batUsing sphinx-buildTranslatingStarting a new translationPEP 545 summary:How to get helpTranslation FAQSilence Warnings From the Test SuiteFixing “easy” Issues (and Beyond)Issue TrackingUsing the Issue TrackerChecking if a bug already existsReporting an issueUnderstanding the issue’s progress and statusDisagreement With a Resolution on the Issue TrackerHelping Triage IssuesClassifying ReportsReviewing PatchesFinding an Issue You Can Help WithGaining the “Developer” Role on the Issue TrackerThe Meta TrackerTriaging an IssuePython triage teamBecoming a member of the Python triage teamGitHub Labels for PRsFields in the Issue TrackerTitleTypeStageComponentsVersionsPriorityKeywordsNosy ListAssigned ToDependenciesSupersederStatusResolutionMercurial RepositoryGenerating Special Links in a CommentChecklist for TriagingFollowing Python’s DevelopmentMailing ListsDiscourseIRCBlogsStandards of behaviour in these communication channelsSetting Expectations for Open Source ParticipationAdditional RepositoriesPorting Python to a new platformHow to Become a Core DeveloperWhat it TakesWhat it MeansGaining Commit PrivilegesMailing ListsSign a Contributor AgreementPull Request mergingResponsibilitiesDeveloper LogProcedure for Granting or Dropping AccessAccepting Pull RequestsAssessing a pull requestUpdating NEWS and What’s New in PythonWorking with GitSeeing active branchesBackporting changes to an older versionReverting a merged pull requestDevelopment CycleBranchesIn-development (main) branchMaintenance branchesSecurity branchesEnd-of-life branchesStagesPre-alphaAlphaBetaRelease Candidate (RC)FinalRepository AdministrationOrganization Repository PolicyOrganization Owner PolicyCurrent OwnersRepository Administrator Role PolicyCurrent AdministratorsRepository Release Manager Role PolicyContinuous IntegrationIn case of troubleBuildbot failures on Pull RequestsChecking results of automatic buildsStabilityFlags-dependent failuresOrdering-dependent failuresTransient failuresCustom buildersAdding to the StdlibAdding to a pre-existing moduleAdding a new moduleAcceptable Types of ModulesRequirementsProposal ProcessChanging the Python LanguageWhat QualifiesPEP ProcessSuggesting new features and language changesExperts IndexStdlibToolsPlatformsMiscellaneousDocumentation Translationsgdb Supportgdb 7 and latergdb 6 and earlierUpdating auto-load-safe-path to allow test_gdb to runExploring CPython’s InternalsCPython Source Code LayoutAdditional ReferencesChanging CPython’s GrammarAbstractChecklistGuide of CPython’s ParserAbstractHow PEG Parsers WorkKey ideasConsequences or the ordered choice operatorSyntaxGrammar ExpressionsLeft recursionVariables in the GrammarGrammar actionsPegenHow to regenerate the parserHow to regenerate the meta-parserGrammatical elements and rulesTokenizationMemoizationAutomatic variablesHard and Soft keywordsError handlingHow Syntax errors are reportedGenerating AST objectsTestingDebugging generated parsersMaking experimentsVerbose modeReferencesDesign of CPython’s CompilerAbstractParsingAbstract Syntax Trees (AST)Memory ManagementSource Code to ASTControl Flow GraphsAST to CFG to BytecodeIntroducing New BytecodeCode ObjectsImportant FilesKnown Compiler-related ExperimentsReferencesDesign of CPython’s Garbage CollectorAbstractMemory layout and object structureIdentifying reference cyclesWhy moving unreachable objects is betterDestroying unreachable objectsOptimization: generationsCollecting the oldest generationOptimization: reusing fields to save memoryOptimization: delay tracking containersUpdating standard library extension modulesChanging Python’s C APIThe internal APIWith PyAPI_FUNC or PyAPI_DATAWith the extern keywordPrivate namesPublic C APILimited APIGuidelines for changing the Limited APIAdding a new definition to the Limited APICoverity ScanAccess to analysis reportsBuilding and uploading analysisKnown limitationsFalse positivesIntentionallyModelingWorkflowFalse positive and intentional issuesPositive issuesContactDynamic Analysis with ClangWhat is Clang?What are Sanitizers?Clang/LLVM SetupDownload, Build and InstallPython Build SetupBuilding PythonBlacklisting (Ignoring) FindingsRunning a buildbot workerPreparing for buildbot worker setupSetting up the buildbot workerConventional always-on machinesLatent workersBuildbot worker operationRequired PortsRequired ResourcesSecurity ConsiderationsCore Developer Motivations and AffiliationsPublished entriesGoals of this pageLimitations on scopeGit Bootcamp and Cheat SheetForking CPython GitHub RepositoryCloning a Forked CPython RepositoryListing the Remote RepositoriesSetting Up Your Name and Email AddressEnabling autocrlf on WindowsCreating and Switching BranchesDeleting BranchesRenaming BranchStaging and Committing FilesReverting ChangesStashing ChangesCommitting ChangesPushing ChangesCreating a Pull RequestUpdating your CPython ForkApplying a Patch from Mercurial to GitDownloading Other’s PatchesAccepting and Merging a Pull RequestBackporting Merged ChangesEditing a Pull Request Prior to MergingAppendix: TopicsBasics for contributorsCore developersDevelopment workflow for contributorsDocumenting Python and style guideIssue tracking and triagingLanguage development in depthTesting and continuous integration